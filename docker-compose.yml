version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: voiceforge-postgres
    environment:
      POSTGRES_USER: voiceforge
      POSTGRES_PASSWORD: password
      POSTGRES_DB: voiceforge_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U voiceforge"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - voiceforge-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: voiceforge-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - voiceforge-network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: voiceforge-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - voiceforge-network

  # Main API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: voiceforge-api
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql+asyncpg://voiceforge:password@postgres:5432/voiceforge_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
      - ./models:/app/models
      - ./storage:/app/storage
      - ./tests:/app/tests
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - voiceforge-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Celery Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: voiceforge-worker
    command: celery -A src.app.worker worker --loglevel=info --concurrency=2
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql+asyncpg://voiceforge:password@postgres:5432/voiceforge_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
    volumes:
      - ./src:/app/src
      - ./models:/app/models
      - ./storage:/app/storage
    depends_on:
      - redis
      - postgres
    networks:
      - voiceforge-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Celery Beat Scheduler
  beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: voiceforge-beat
    command: celery -A src.app.worker beat --loglevel=info
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql+asyncpg://voiceforge:password@postgres:5432/voiceforge_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      CELERY_BROKER_URL: redis://redis:6379/1
    volumes:
      - ./src:/app/src
    depends_on:
      - redis
      - postgres
    networks:
      - voiceforge-network

  # Flower - Celery Monitoring
  flower:
    image: mher/flower:latest
    container_name: voiceforge-flower
    command: celery flower --broker=redis://redis:6379/1 --port=5555
    ports:
      - "5555:5555"
    environment:
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
    depends_on:
      - redis
    networks:
      - voiceforge-network

  # Prometheus Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: voiceforge-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - voiceforge-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: voiceforge-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - grafana_data:/var/lib/grafana
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - voiceforge-network

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data:

networks:
  voiceforge-network:
    driver: bridge